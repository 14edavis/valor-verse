import openai
import os
import configparser

# Change notes about the project here. The AI will take care of formatting and other niceties when it generates the README.
project_notes = f"""
Name: ValorVerse

About:
The name came from a list of possible project names that were brainstormed by ChatGPT. 
This README is also generated by openai. You can see the prompts used to generate it in app.py.
Still in intial development

Goal: Assist story writers for the volunteer project "Stories Behind the Stars" in writing accurate and compelling stories about \
WWII fallen based off of provided research.

Dependencies: openai (these should be formatted as a list)

How It Works:
Each user needs to get their own API key and save it in secret.config. For sample see sample_secret.config
Create 'research.txt'. Copy and paste relevant research into it.
The story will be saved to 'output.txt'. If you like a story, save it elsewhere so it doesn't get overwritten.

"""

# Set API key
config = configparser.ConfigParser()
config.readfp(open(r'secret.config'))
openai.api_key=config.get('API', 'api_key')

def get_completion(prompt, model="gpt-3.5-turbo", temperature=0):
    messages = [{"role": "user", "content": prompt}]
    repsonse = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=temperature #ie degree of randomness, 0-1
    )
    return repsonse.choices[0].message["content"]

def generateReadMe():
    file = open("README.md", "r")
    previous_readme = file.read()
    file.close()

    prompt =f"""
    Write a software project README.md file explaining the project in the reference text delimited by ```. Make sure to include all details \
    given in the provided text. It is important that all details are included.

    This new README should match the format of the sample text delimited by <>. Use the same headers, when possible. All deviations \
    from the sample text should be minimal.

    First, generate a README without looking at the sample text. Next, compare the information with the sample text. Use this to create your final \
    README. If the sample text contains extra information, remove it. If the sample text is missing information, add it.

    Welcome the reader. Use a friendly tone. You are writing to both software engineers and potential story writers.

    At the end, note that this README was generated by openai.

    Provide output in markdown format. Include headers and subheaders, as needed.

    Reference Text:```{project_notes}```

    Previously Generated README: <{previous_readme}>
    """
    response = get_completion(prompt)

    file = open ("README.md", "w")
    file.write(response)
    file.close()

def generateStory(reference_text):
    prompt = f"""
    Your task is to write a story about a fallen solider from WWII. Your story should only draw on facts given to you in \
    the reference material, delimited by ```. If a date, name, or other detail is not included in the reference material or \
    this prompt, do NOT include it in the story. Do not make assumptions.

    Before you write the story, first check the reference material an make note of the following key details about the fallen. It is \
    okay if some details are missing.
    - Full Name
    - Birth date
    - Birth place
    - Interesting details about home life (schooling, occupation, acheivements, etc.)
    - Were they married? If so, did they have children?
    - Date of enlistment
    - Rank 
    - Branch of service
    - Death date
    - Death place
    - Cause of death
    - Burial location
    - Father's name
    - Mother's name
    - How many brothers and sisters
    - Interesting details about family members (parent's occupation, other siblings that served in the millitary, etc.) 

    Once you have noted any facts found in the reference text, write a 3-5 paragraph story about the fallen solider. The story \
    should be both educational and fun to read. Only include details that are directly related to the fallen solider and his/her \
    story. Always be respectful of the fallen and their sacrifice. 

    The first sentence should include the fallen's full name, birth date, and birth place (if provided). The rest of the first paragraph \
    should describe any details about the fallen's childhood and family.

    In the following paragraphs, refer to the fallen by their title and last name. Describe the fallen's enlistment date, their time serving, \
    and the situations surrounding their death. The final paragraph should give their death date, death place, cause of death, \
    and location of burial (if provided).

    At the end, include a formatted "Citations" section with any citations included in the reference text. All citations should be listed as \
    bullet point items. This section is in addition to the 3-5 paragraphs mentioned above.

    Again, only use facts and details found in this reference text: ```{reference_text}```

    """

    response = get_completion(prompt)
    file = open ("output.txt", "w")
    file.write(response)
    file.close()    


def main():
    print("Checking README for needed updates...")
    generateReadMe()

    print("Writing story...")
    print("Reading research as refernce...")
    file = open("research.txt", "r")
    reference_text = file.read()
    file.close()
    print("Sending request to AI...")
    generateStory(reference_text)

    print("Finished")

main()